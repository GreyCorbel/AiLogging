<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GreyCorbel.Logging.AppInsights</name>
    </assembly>
    <members>
        <member name="T:GreyCorbel.Logging.IAiLogger">
            <summary>
            Interface for AppInsights logging helper that follows defined logging standards, namely:
            <list type="bullet">
            <item>
            <description>Application and Component (and optionally a Module) are recorded in Custom dimensions of all events</description>
            </item>
            <item>
            <description>All metrics have unified namespace in format [Application].[Component][.[Module]]</description>
            </item>
            <item>
            <description>Support for W3C traceParentHeader</description>
            </item>
            <item>
            <description>All metrics strictly logged via instance of Metric class with metric namespace constructed as specified above.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="M:GreyCorbel.Logging.IAiLogger.AddMetadata(System.String,System.String)">
            <summary>
       Adds additional custom dimension to be sent with logged events. Note that Application, Component (and Module) cannot be added.
    </summary><param name="Name">Name of dimension to add</param><param name="Value">Value of dimension</param>
        </member>
        <member name="M:GreyCorbel.Logging.IAiLogger.ClearOperationContext">
            <summary>
       Removes operation context previously established via <see cref="M:GreyCorbel.Logging.IAiLogger.SetOperationContext(System.String,System.String,System.String)" />
    </summary>
        </member>
        <member name="M:GreyCorbel.Logging.IAiLogger.ClearOperationState">
            <summary>
       Removes previously setup operation state. See <seealso cref="M:GreyCorbel.Logging.IAiLogger.SetOperationContext(System.String,System.String,System.String)" />
    </summary>
        </member>
        <member name="M:GreyCorbel.Logging.IAiLogger.ClearUserContext">
            <summary>
       Removes user context previously established via <see cref="M:GreyCorbel.Logging.IAiLogger.SetOperationContext(System.String,System.String,System.String)" />
    </summary>
        </member>
        <member name="M:GreyCorbel.Logging.IAiLogger.GetMetric(System.String)">
            <summary>
       Returns instance of metric ready to be tracked with value.
       Metric namespace is automatically assigned based on name of application and component.
    </summary><param name="Name">Name of metric to return</param><returns>Instance of Metric</returns>
        </member>
        <member name="M:GreyCorbel.Logging.IAiLogger.GetMetric(System.String,System.String)">
            <summary>
      Returns instance of metric ready to be tracked with value.
      Metric namespace is automatically assigned based on name of application and component, and this command adds specified suffix, delimited from default namespace by a '.' (dot) char
    </summary><param name="Name">Name of metric to return</param><param name="NamespaceSuffix">Suffix to add to metric instance default namespace.</param><returns>Instance of Metric</returns>
        </member>
        <member name="M:GreyCorbel.Logging.IAiLogger.RemoveMetadata(System.String)">
            <summary>
       Removes custom dimension previously added via <see cref="M:GreyCorbel.Logging.IAiLogger.AddMetadata(System.String,System.String)" />
    </summary><param name="Name">Name of dimension to remove</param>
        </member>
        <member name="M:GreyCorbel.Logging.IAiLogger.ResetMetadata">
            <summary>
       Removes all previously added custom dimensions, so only mandatory dimensions remain (Application, Component (and Module, if used))
       See also <seealso cref="M:GreyCorbel.Logging.IAiLogger.AddMetadata(System.String,System.String)" />
    </summary>
        </member>
        <member name="M:GreyCorbel.Logging.IAiLogger.SetOperationContext(System.String,System.String)">
            <summary>
       Sets traceId and parentId based on passed value of traceparent http header value. Throws ArgumentException if value cannot be parsed according to W3C standard.
       For details on W3C recommended standard, see <see href="https://www.w3.org/TR/trace-context" />
    </summary><param name="traceParentHeader">Value of traceparent http header. Method sets traceId and parentId as parsed from header value.</param><param name="Name" />
        </member>
        <member name="M:GreyCorbel.Logging.IAiLogger.SetOperationContext(System.String,System.String,System.String)">
            <summary>
       Establishes name and identifier of current operation, along with id of parent operation. This enables end to end monitoring across applications and components
       Information from established operation context are sent with telemetry records until removed via <see cref="M:GreyCorbel.Logging.IAiLogger.ClearOperationContext" /> or changed via another call of <see cref="M:GreyCorbel.Logging.IAiLogger.SetOperationContext(System.String,System.String,System.String)" />
    </summary><param name="traceId">ID of operation (aka correlation ID)</param><param name="Name">Name of operation</param><param name="parentId">ID of parent operation (aka Parent Correlation ID)</param>
        </member>
        <member name="M:GreyCorbel.Logging.IAiLogger.SetOperationState(System.String)">
            <summary>
       Stores traceState to custom dimension named TraceStace
       Meant to support W3C tracing standard <see href="https://www.w3.org/TR/trace-context" />
    </summary><param name="traceStateHeader">Value of received tracestate header. Method puts it to TraceState dimension as-is, without any parsing</param>
        </member>
        <member name="M:GreyCorbel.Logging.IAiLogger.SetUserContext(System.String,System.String,System.String,System.String)">
            <summary>
       Establishes name and identifiers of user associated with operation. This enables to use App Insights as collector of audit trail
       Information from established user context are sent with telemetry records until removed via <see cref="M:GreyCorbel.Logging.IAiLogger.ClearUserContext" /> or changed via another call of <see cref="M:GreyCorbel.Logging.IAiLogger.SetUserContext(System.String,System.String,System.String,System.String)" />
    </summary><param name="Id" /><param name="AuthenticatedId" /><param name="AccountId" /><param name="UserAgent" />
        </member>
        <member name="M:GreyCorbel.Logging.IAiLogger.WriteDependency(System.String,System.String,System.String,System.String,System.DateTime,System.TimeSpan,System.String,System.Boolean)">
            <summary>
      Writes information about call to external service
    </summary><param name="Target">Name of endpoint (hostname or host identifier for server being called)</param><param name="TypeName">Name of the dependency type, such as FTP, SQL or HTTP</param><param name="Name">Name of the dependency, such as FileDownload, StoredProcedureCall</param><param name="Data">Dependency details, such as parameters of request</param><param name="Start">When started</param><param name="Duration">Duration of call</param><param name="ResultCode">Result code of operation</param><param name="Success">Whether or not call was successful</param>
        </member>
        <member name="M:GreyCorbel.Logging.IAiLogger.WriteEvent(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
       Sends custom event to App Insights along with mandatory metadata and optional ad-hoc metadata
    </summary><param name="EventName">Name of event</param><param name="Metadata">Ad-hoc additional custom dimensions to send with event</param>
        </member>
        <member name="M:GreyCorbel.Logging.IAiLogger.WriteException(System.Exception,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
       Logs exception to App Insights along with mandatory metadata and optional ad-hoc metadata
    </summary><param name="Exception">Exception to be logged</param><param name="Metadata">Ad-hoc additional custom dimensions to send with event</param>
        </member>
        <member name="M:GreyCorbel.Logging.IAiLogger.WriteRequest(System.String,System.DateTime,System.TimeSpan,System.String,System.Boolean,System.String,System.String)">
            <summary>
       Sends details about processed request to Application Insights
    </summary><param name="Name">Human readable name of operation performed or request processedc</param><param name="Start">Timestamp when request arrived</param><param name="Duration">Duration of the request</param><param name="StatusCode">Result of operation. Typically Http response code</param><param name="IsSuccess">Whether or not the request was successfully processed</param><param name="Url">Url where request was received. Useful to log detailed REST API URL parameters received</param><param name="RequestId">Native request ID</param>
        </member>
        <member name="M:GreyCorbel.Logging.IAiLogger.WriteTrace(System.String,Microsoft.ApplicationInsights.DataContracts.SeverityLevel,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
       Sends custom trace to App Insights, along with all custom dimensions associated
    </summary><param name="Message">Message to send</param><param name="Severity">Severity of trace record</param><param name="Metadata">
      Ad-hoc metadata to send with trace, in addition to mandatory metadata and metadata registered via <see cref="M:GreyCorbel.Logging.IAiLogger.AddMetadata(System.String,System.String)" />
    </param>
        </member>
        <member name="T:GreyCorbel.Logging.AiLogger">
            <summary>
            Helper class for AppInsights logging while following defined logging standards, namely:
            <list type="bullet">
            <item>
            <description>Application and Component (and optionally a Module) are recorded in Custom dimensions of all events</description>
            </item>
            <item>
            <description>All metrics have unified namespace in format [Application].[Component][.[Module]]</description>
            </item>
            <item>
            <description>Support for W3C traceParentHeader</description>
            </item>
            <item>
            <description>All metrics strictly logged via instance of Metric class with metric namespace constructed as specified above.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="M:GreyCorbel.Logging.AiLogger.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
      Creates instance of AiLogger with configuration taken from configuration provider
      Provider is supposed to provide value for at least InstrumentationKey, Application and Component
      Provider can optionally provide value for Module, Role and Instance
    </summary><param name="configuration">Instance of configuration provider</param>
        </member>
        <member name="M:GreyCorbel.Logging.AiLogger.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
      Creates instance of AiLogger with given instrumentation key and names of Application, Component and Module
     </summary><param name="InstrumentationKey">Instrumentation key of related Application Insights instance to send logs to</param><param name="Application">Name of applicaation</param><param name="Component">Name of component</param><param name="Module">Name of module</param>
        </member>
        <member name="M:GreyCorbel.Logging.AiLogger.#ctor(System.String,System.String,System.String)">
            <summary>
      Creates instance of AiLogger with given instrumentation key and names of Application and Component
     </summary><param name="InstrumentationKey">Instrumentation key of related Application Insights instance to send logs to</param><param name="Application">Name of applicaation</param><param name="Component">Name of component</param>
        </member>
        <member name="M:GreyCorbel.Logging.AiLogger.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
      Creates instance of AiLogger with given instrumentation key and names of Application and Component, and identifiers for cloud role and instance
    </summary><param name="InstrumentationKey">Instrumentation key of related Application Insights instance to send logs to</param><param name="Application">Name of applicaation</param><param name="Component">Name of component</param><param name="Role">Name of the role (e.g. computername the code is running on)</param><param name="Instance">Identifier of the instance (e.g. in case that multiple instances of component are hosted on single computer)</param>
        </member>
        <member name="M:GreyCorbel.Logging.AiLogger.AddMetadata(System.String,System.String)">
            <summary>
       Adds additional custom dimension to be sent with logged events. Note that Application, Component (and Module) cannot be added.
    </summary><param name="Name">Name of dimension to add</param><param name="Value">Value of dimension</param>
        </member>
        <member name="M:GreyCorbel.Logging.AiLogger.RemoveMetadata(System.String)">
            <summary>
       Removes custom dimension previously added via <see cref="M:GreyCorbel.Logging.AiLogger.AddMetadata(System.String,System.String)" />
    </summary><param name="Name">Name of dimension to remove</param>
        </member>
        <member name="M:GreyCorbel.Logging.AiLogger.ResetMetadata">
            <summary>
       Removes all previously added custom dimensions, so only mandatory dimensions remain (Application, Component (and Module, if used))
       See also <seealso cref="M:GreyCorbel.Logging.AiLogger.AddMetadata(System.String,System.String)" />
    </summary>
        </member>
        <member name="M:GreyCorbel.Logging.AiLogger.WriteTrace(System.String,Microsoft.ApplicationInsights.DataContracts.SeverityLevel,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
       Sends custom trace to App Insights, along with all custom dimensions associated
    </summary><param name="Message">Message to send</param><param name="Severity">Severity of trace record</param><param name="Metadata">
      Ad-hoc metadata to send with trace, in addition to mandatory metadata and metadata registered via <see cref="M:GreyCorbel.Logging.AiLogger.AddMetadata(System.String,System.String)" />
    </param>
        </member>
        <member name="M:GreyCorbel.Logging.AiLogger.WriteRequest(System.String,System.DateTime,System.TimeSpan,System.String,System.Boolean,System.String,System.String)">
            <summary>
       Sends details about processed request to Application Insights
    </summary><param name="Name">Human readable name of operation performed or request processedc</param><param name="Start">Timestamp when request arrived</param><param name="Duration">Duration of the request</param><param name="StatusCode">Result of operation. Typically Http response code</param><param name="IsSuccess">Whether or not the request was successfully processed</param><param name="Url">Url where request was received. Useful to log detailed REST API URL parameters received</param><param name="RequestId">Native request ID</param>
        </member>
        <member name="M:GreyCorbel.Logging.AiLogger.SetOperationContext(System.String,System.String,System.String)">
            <summary>
       Establishes name and identifier of current operation, along with id of parent operation. This enables end to end monitoring across applications and components
       Information from established operation context are sent with telemetry records until removed via <see cref="M:GreyCorbel.Logging.AiLogger.ClearOperationContext" /> or changed via another call of <see cref="M:GreyCorbel.Logging.AiLogger.SetOperationContext(System.String,System.String,System.String)" />
    </summary><param name="traceId">ID of operation (aka correlation ID)</param><param name="Name">Name of operation</param><param name="parentId">ID of parent operation (aka Parent Correlation ID)</param>
        </member>
        <member name="M:GreyCorbel.Logging.AiLogger.SetOperationContext(System.String,System.String)">
            <summary>
       Sets traceId and parentId based on passed value of traceparent http header value. Throws ArgumentException if value cannot be parsed according to W3C standard.
       For details on W3C recommended standard, see <see href="https://www.w3.org/TR/trace-context" />
    </summary><param name="traceParentHeader">Value of traceparent http header. Method sets traceId and parentId as parsed from header value.</param><param name="Name" />
        </member>
        <member name="M:GreyCorbel.Logging.AiLogger.SetOperationState(System.String)">
            <summary>
       Stores traceState to custom dimension named TraceStace
       Meant to support W3C tracing standard <see href="https://www.w3.org/TR/trace-context" />
    </summary><param name="traceStateHeader">Value of received tracestate header. Method puts it to TraceState dimension as-is, without any parsing</param>
        </member>
        <member name="M:GreyCorbel.Logging.AiLogger.ClearOperationContext">
            <summary>
       Removes operation context previously established via <see cref="M:GreyCorbel.Logging.AiLogger.SetOperationContext(System.String,System.String,System.String)" />
    </summary>
        </member>
        <member name="M:GreyCorbel.Logging.AiLogger.ClearOperationState">
            <summary>
       Removes previously setup operation state. See <seealso cref="M:GreyCorbel.Logging.AiLogger.SetOperationContext(System.String,System.String,System.String)" />
    </summary>
        </member>
        <member name="M:GreyCorbel.Logging.AiLogger.SetUserContext(System.String,System.String,System.String,System.String)">
            <summary>
       Establishes name and identifiers of user associated with operation. This enables to use App Insights as collector of audit trail
       Information from established user context are sent with telemetry records until removed via <see cref="M:GreyCorbel.Logging.AiLogger.ClearUserContext" /> or changed via another call of <see cref="M:GreyCorbel.Logging.AiLogger.SetUserContext(System.String,System.String,System.String,System.String)" />
    </summary><param name="Id" /><param name="AuthenticatedId" /><param name="AccountId" /><param name="UserAgent" />
        </member>
        <member name="M:GreyCorbel.Logging.AiLogger.ClearUserContext">
            <summary>
       Removes user context previously established via <see cref="M:GreyCorbel.Logging.AiLogger.SetOperationContext(System.String,System.String,System.String)" />
    </summary>
        </member>
        <member name="M:GreyCorbel.Logging.AiLogger.WriteEvent(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
       Sends custom event to App Insights along with mandatory metadata and optional ad-hoc metadata
    </summary><param name="EventName">Name of event</param><param name="Metadata">Ad-hoc additional custom dimensions to send with event</param>
        </member>
        <member name="M:GreyCorbel.Logging.AiLogger.WriteException(System.Exception,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
       Logs exception to App Insights along with mandatory metadata and optional ad-hoc metadata
    </summary><param name="Exception">Exception to be logged</param><param name="Metadata">Ad-hoc additional custom dimensions to send with event</param>
        </member>
        <member name="M:GreyCorbel.Logging.AiLogger.GetMetric(System.String)">
            <summary>
       Returns instance of metric ready to be tracked with value.
       Metric namespace is automatically assigned based on name of application and component.
    </summary><param name="Name">Name of metric to return</param><returns>Instance of Metric</returns>
        </member>
        <member name="M:GreyCorbel.Logging.AiLogger.GetMetric(System.String,System.String)">
            <summary>
      Returns instance of metric ready to be tracked with value.
      Metric namespace is automatically assigned based on name of application and component, and this command adds specified suffix, delimited from default namespace by a '.' (dot) char
    </summary><param name="Name">Name of metric to return</param><param name="NamespaceSuffix">Suffix to add to metric instance default namespace.</param><returns>Instance of Metric</returns>
        </member>
        <member name="M:GreyCorbel.Logging.AiLogger.WriteDependency(System.String,System.String,System.String,System.String,System.DateTime,System.TimeSpan,System.String,System.Boolean)">
            <summary>
      Writes information about call to external service
    </summary><param name="Target">Name of endpoint (hostname or host identifier for server being called)</param><param name="TypeName">Name of the dependency type, such as FTP, SQL or HTTP</param><param name="Name">Name of the dependency, such as FileDownload, StoredProcedureCall</param><param name="Data">Dependency details, such as parameters of request</param><param name="Start">When started</param><param name="Duration">Duration of call</param><param name="ResultCode">Result code of operation</param><param name="Success">Whether or not call was successful</param>
        </member>
    </members>
</doc>
