# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the main branch
on:
  push:
    branches:
      - master
    paths:
      - '**.psd1'
      - '**.psm1'
    tags:
      - 'v*'


# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  publishToGallery:
    # The type of runner that the job will run on
    runs-on: windows-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    - name: Checkout
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      uses: actions/checkout@v2
      #copy files
    - name: Build
      shell: pwsh
      run: |
        $Name = 'AiLogging'
        $Target = "$env:GITHUB_WORKSPACE\$Name"
        write-host "Building in: $env:GITHUB_WORKSPACE\$Name"
        New-Item -Path  "$env:GITHUB_WORKSPACE" -Name $Name -ItemType Directory -Force | Out-Null
        New-Item -Path  "$env:GITHUB_WORKSPACE" -Name Assets -ItemType Directory -Force | Out-Null
        Copy-Item -Path "$env:GITHUB_WORKSPACE\$Name`.psd1" -Destination $Target -Force
        Copy-Item -Path "$env:GITHUB_WORKSPACE\$Name`.psm1" -Destination $Target -Force
        Copy-Item -Path "$env:GITHUB_WORKSPACE\images\icon.png" -Destination "$Target\images" -Force
        Copy-Item -Path "$env:GITHUB_WORKSPACE\lib\net45\Microsoft.ApplicationInsights.dll" -Destination "$Target\lib\net45" -Force
        Copy-Item -Path "$env:GITHUB_WORKSPACE\LICENSE.TXT" -Destination $Target -Force

        Compress-Archive -Path "$env:GITHUB_WORKSPACE\$Name\" -DestinationPath "$env:GITHUB_WORKSPACE\Assets\$Name-Full.zip"

      # Publish to PS Gallery
    - name: Publish
      shell: pwsh
      env:
        SECRET: ${{ secrets.PSGallery_APIKey }}
      run: |
        $Name = 'AiLogging'
        $Target = "$env:GITHUB_WORKSPACE\$Name"
        write-host "Publishing from: $target"
        try
        {
          Publish-Module -Path $target -NuGetApiKey "$env:SECRET"
        }
        catch
        {
          Write-Host "Error: $($_.Exception)"
          throw
        }
